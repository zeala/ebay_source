<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 currentState="tileViewLarge" 
		 xmlns:panels="com.ebayproject.components.panels.*"
		 >
	<fx:Metadata>
		[Event(name="fetchMoreItems", type="flash.events.Event")]
	</fx:Metadata>
	<fx:Script>
		<![CDATA[
			import com.ebayproject.controllers.IProductManager;
			
			import mx.core.FlexGlobals;
			import mx.events.ResizeEvent;
			
			import spark.components.Application;
			
			
			private var _productManager : IProductManager;
			[Bindable("productManagerChange")]
			public function get productManager (): IProductManager
			{
				return _productManager;
			}
			public function set productManager(val:IProductManager):void
			{
				_productManager = val;
				dispatchEvent(new Event("productManagerChange"));
				_productManager.addEventListener("itemsSearchResultChange", addItemSearchEventListener );
			}
			
			
			private function setResizeHandler():void
			{
				Application(FlexGlobals.topLevelApplication).addEventListener(
					ResizeEvent.RESIZE, resizeHandler);
			}
			
			private function resizeHandler( event : ResizeEvent ):void
			{
				bookContainer.scaleX = getBookScale();
				bookContainer.scaleY = getBookScale();
			}
			
			private var bookWidthToHeightRatio : Number = 1.5;
			
			private function getBookScale():Number
			{
				var yOffset : int = 140;
				var xOffset  : int = 100;
				var app : Application = FlexGlobals.topLevelApplication as Application;
				var h : Number = app.height - yOffset;
				var w : Number = app.width - xOffset;
				var scale : Number;
				
				var appWidthToHeightRatio : Number = w/h;
				
				if ( appWidthToHeightRatio >= 1.5 )
				{
					scale = h / bookContainer.height;
				}
				else
				{
					scale = w / bookContainer.width;
				}	
				return scale;
			}
			
			private function listCreationCompleteHandler():void
			{
				trace("\n list creation complete handler called ");
				
				resultsList.scroller.verticalScrollBar.addEventListener(Event.CHANGE, 
					verticalScrollChangeHandler);
			}
			
			private function verticalScrollChangeHandler( event : Event ) : void
			{
				var scrollPos : Number = 
					resultsList.scroller.verticalScrollBar.value;
				var maxValue : Number = 
					resultsList.scroller.verticalScrollBar.maximum;
				

				if ( maxValue <= scrollPos + 100 )
				{
					fetchMore();
				}
			}
			
			
			private var readyToFetch : Boolean = true;
			private var previousNumItems : int;
			private var newNumberOfItems : int;
			private var fetchRequested : Boolean;
			
			private function fetchMore():void
			{
				trace("\n********t fetch new items  fetchrequested : " + fetchRequested +
					" readyToFetch : " + readyToFetch );


				if ( !fetchRequested && readyToFetch )
				{
					dispatchEvent(new Event("fetchMoreItems"));
					readyToFetch = false;	
					fetchRequested = true;
					trace("--------------------- actually requested search ");
				}
			}
			
			
			
			
			private function addItemSearchEventListener(event : Event):void
			{
				
				if ( productManager.itemsSearchResult )
				{
					productManager.itemsSearchResult.addEventListener("searchResultItemsChange", itemSearchResultsChangeHandler )
				}
				
				
			}
			
			private function itemSearchResultsChangeHandler(event : Event):void
			{
				
				
				readyToFetch = true;	
				fetchRequested = false;
				if ( ! resultsList.dataProvider ) return;
				trace("\n\n ++++++++++++++++ items updated length : " + resultsList.dataProvider.length );
			}
		]]>
	</fx:Script>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	
	<s:states>
		<s:State name="tileViewLarge"/>
		<s:State name="tileViewSmall"/>
		<s:State name="listView"/>
		<s:State name="bookView"/>
	</s:states>
	
	<s:layout>
		<s:VerticalLayout paddingBottom="10" paddingLeft="10" paddingRight="10" paddingTop="10"/>
	</s:layout>
	
	<s:List 
		id="resultsList"
		left="0" right="0" width="100%" height="{height}"
		dataProvider="{productManager.itemsSearchResult.searchResultItem}"	
		itemRenderer.tileViewLarge="com.ebayproject.components.searchResultsView.SearchResultViewLargeRenderer"
		itemRenderer.tileViewSmall="com.ebayproject.components.searchResultsView.SearchResultViewSmallRenderer"
		itemRenderer.listView="com.ebayproject.components.searchResultsView.SearchResultDetailsViewRenderer"
		excludeFrom="bookView"
		creationComplete="listCreationCompleteHandler()"
		useVirtualLayout="true"
		>
		<s:layout.tileViewLarge >
			<s:TileLayout 
				columnWidth.tileViewLarge="150" 
				rowHeight.tileViewLarge="150"
				horizontalGap="14" verticalGap="14"
				horizontalAlign="center"
				/>
		</s:layout.tileViewLarge>
			
		<s:layout.tileViewSmall>
			<s:TileLayout 
				columnWidth.tileViewSmall="90" 
				rowHeight.tileViewSmall="90"
				rowHeight.listView="50"
				columnWidth.listView="{resultsList.width - 10}"
				horizontalGap="14" verticalGap="14"
				horizontalAlign="center"
				/>
		</s:layout.tileViewSmall>
		<s:layout.listView >
			<s:VerticalLayout gap="4" />
		</s:layout.listView>
	</s:List>
	
	<s:Button click="fetchMore()" label="fetch more"/>
	<panels:BookContainer
		id="bookContainer"
		productManager="{productManager}" 
		width="900" height="600"
		horizontalCenter="0"
		scaleX="{getBookScale()}" scaleY="{getBookScale()}"
		creationComplete="setResizeHandler()"
		includeIn="bookView"
		/>
</s:Group>
