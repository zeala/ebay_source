package com.ebayproject.components.imageScroll {		import flash.events.Event;	import flash.events.TimerEvent;	import flash.utils.Timer;		import mx.collections.ArrayCollection;	import mx.core.UIComponent;		import ebayApp.services.dto.SearchResultItem;

	/**	 * Based on the work of Peter Wright:	 * http://www.f-90.co.uk/blog/	 * 	 * This is a slide panel thumbnail navigator for displaying	 * a continuous scrolling list of thumbnail images for use	 * in slideshows and other navigation.	 *  	 * @author Joel Hooks	 * 	 */		public class Navigator extends UIComponent{		/**		 * Array of NavItem objects to display in the scroll list 		 */				private var _navArray	:Array;		/**		 * Currently selected NavItem 		 */				private var clip		:NavItem;		/**		 * Damping applied to TweenLight movements.		 * Affects the speed at which items scroll		 * when a NavItem is clicked		 */		private var _damping	:Number		= 10;		/**		 * The center point on the xAxis. Used as a target		 * for lining the selected NavItem in the center		 * 		 * TODO: Add centerY for vertical layout, add ability		 * to update based on current application size 		 */		private var _centerX	:Number		= 200;		/**		 * The sum of all the NavItem widths 		 */		private var totalWidth	:Number		= 0;		/**		 * The current width of the container.		 * 		 * TODO: containerHeight for vertical layouts.		 * Update on app resize. 		 */		private var _containerWidth:Number = 0;		/**		 * The width of an individual item. 		 * 		 * TODO: This should be changed to accept variables		 * as well as adding a height for vertical layouts. 		 */				private var _itemWidth:Number = 0;		/**		 * A timer for slideshow playback 		 */		private var timer:Timer;		/**		 * The current slide in a slide show 		 */		private var currentSlide:int = 0;		private var _slideDelaySeconds:Number = 3;				private var _images : ArrayCollection;		[Bindable("imagesChange")]		public function get images():ArrayCollection		{			return _images		}		public function set images(val:ArrayCollection ) : void		{			_images = val;			var count : int = 0;			for each( var item:SearchResultItem in images )			{				var navItem:NavItem = new NavItem(count, item.imageURL, 100 );				navItem.width = 100;				navItem.height = 100;				trace("\n item.imageURL : " + item.imageURL);				navItem.addEventListener(NavItem.EVENT_CLICKED, centerNav);				addChild(navItem)				_navArray.push(navItem)				totalWidth+=navItem.width				count = count + 1			}									dispatchEvent( new Event("imagesChanges"));		}		/**		 * Constructor for Navigator		 *  		 * @param images XML list of images to load		 * @param damping Controls the transition speed as list scrolls		 * @param thumbSize the size of the thumbnail object		 * @param centerX The mid-point.		 * @param containerWidth The width of the container holding the navigator.		 * @param slideShow is this a slideshow?		 * @param slideDelatSeconds how many seconds to hold each fram in a slideshow.		 * 		 */					public function Navigator(){			super();			_damping	=  10;			_centerX	= 300;			_navArray	= [];			_containerWidth = 600;			_slideDelaySeconds = 2000			var count:int = 0;			/*for each( var item:SearchResultItem in images )			{				var navItem:NavItem = new NavItem(count, item.imageURL, 100 );				navItem.width = 100;				navItem.height = 100;				trace("\n item.imageURL : " + item.imageURL);				navItem.addEventListener(NavItem.EVENT_CLICKED, centerNav);				addChild(navItem)				_navArray.push(navItem)				totalWidth+=navItem.width				count = count + 1			}*/			trace("\nTOTAL WIDTH : " + totalWidth )/*			if( slideshow )			{	 			startSlideshow( )					}			//select the first image			_navArray[0].dispatchEvent( new Event( NavItem.EVENT_CLICKED ) );			swap();*/		}				/**		 * Start the slideshow 		 * 		 */				public function startSlideshow( ):void		{ 			timer = new Timer( _slideDelaySeconds * 1000 ) 			timer.addEventListener( TimerEvent.TIMER, onTimer ); 			 			timer.start();						}				/**		 * Stop the slideshow		 * 		 */				public function stopSlideshow( ):void		{			timer.removeEventListener( TimerEvent.TIMER, onTimer );			timer.stop();		}				/**		 * "Click" the next image in the sequence. Currently these clicks are odd		 * because it is neccesary to figure out exactly which item needs to be clicked		 * based on its position in the container relative to the center, currently selected item.		 *  		 * @param te		 * @private		 */				private function onTimer( te:TimerEvent ):void		{			for( var i:int=0;i<this.navArray.length;i++)			{				var navItem:NavItem = navArray[i];				trace( navItem.ref, clip.ref );				if( clip.ref == navArray.length - 1 )				{					if( navItem.ref == 0 )					{						_navArray[i].dispatchEvent( new Event( NavItem.EVENT_CLICKED ) );						return					}				}				if( navItem.ref == clip.ref+1 )				{					_navArray[i].dispatchEvent( new Event( NavItem.EVENT_CLICKED ) );					return;				}			}		}				/**		 * Shifts the images to keep the continuous scroll continuous		 * @private		 */				private function swap():void {			aligned();						var left:NavItem = _navArray[0];			var right:NavItem = _navArray[_navArray.length-1];						for (var i:int = 0; i<_navArray.length; i++) {				if (left.x<0-left.width) {					// moves clips from first to last					_navArray.push(_navArray.shift());					left.x = right.x+right.width;				}				                       				if (right.x>totalWidth-right.width) {					// moves clips from last to first					_navArray.unshift(_navArray.pop());					right.x = left.x-right.width;				}			}		}				/**		 * Moves the selected NavItem to the center of the navigation container. 		 * @param e		 * @private		 */				private function centerNav(e:Event):void 		{			//if( timer ) stopSlideshow();						removeEventListener(Event.ENTER_FRAME, setPositions);							clip = e.target as NavItem;			trace(clip.ref)			for (var i:int = 0; i<_navArray.length; i++) {				if(navArray[i]!=clip){					navArray[i].enable();				} else navArray[i].disable();			}			addEventListener(Event.ENTER_FRAME, setPositions);		}				/**		 * Set the positions of the NavItems 		 * @param e		 * @private		 */				private function setPositions(e:Event = null):void {			var thisX	:Number	= clip.x+clip.width;			var deltaX	:Number	= thisX-(_centerX + clip.width / 2 );			_navArray[0].x -= deltaX/_damping;			swap();						if (Math.abs(deltaX)<1) {				removeEventListener(Event.ENTER_FRAME, setPositions);				}		}		/**		 * Make sure all of the NavItems stay aligned while they are swapped 		 * @private		 */				private function aligned():void {			for (var i:int = 1; i<_navArray.length; i++) {				_navArray[i].x = _navArray[i-1].x+_navArray[i-1].width;			}		}				/**		 * An array of NavItems		 * @return 		 * 		 */				public function get navArray():Array { return _navArray; }			}	}