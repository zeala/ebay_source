package model
{
	import flash.events.Event;
	import flash.events.EventDispatcher;
	import flash.utils.Dictionary;
	
	import mx.collections.ArrayCollection;
	
	import com.ebayproject.controllers.IProductManager;
	
	import ebayApp.services.dto.Category;
	import ebayApp.services.results.CatalogSearchResults;
	import ebayApp.services.results.SearchResults;
	
	public class ProductManager extends EventDispatcher implements IProductManager
	{
		public static const CATEGORIES_CHANGE : String = "categoriesChange";
		public static const CATALOG_SEARCH_RESULT_CHANGE : String = "catalogSearchResultChange";
		public static const ITEM_SEARCH_RESULT_CHANGE : String = "itemsSearchResultChange";
		
		private static var instance : ProductManager
		
		public static function getInstance():ProductManager
		{
			if ( !instance )
			{
				instance = new ProductManager();
			}
			
			return instance;
		}
		
		
		//-------------------------------------------------------------------------
		//
		// Properties
		//
		//-------------------------------------------------------------------------
		
		//-----------------------------
		// categories
		//-----------------------------
		private var _categories : ArrayCollection;
		[Bindable("categoriesChange")]
		public function get categories():ArrayCollection
		{
			trace("\n getcategories called ");
			return _categories;
		}
		public function set categories(val:ArrayCollection):void
		{
			trace("\n set categories called ");
			if ( _categories != val )
			{
				_categories = val;
				trace("\n new categories AC ");	
			}
			dispatchEvent(new Event(CATEGORIES_CHANGE));
		}
		
		//-----------------------------
		// itemsSearchResult
		//-----------------------------
		private var _itemsSearchResult : SearchResults;
		
		[Bindable("itemsSearchResultChange")]
		public function get itemsSearchResult():SearchResults
		{
			return _itemsSearchResult;
		}
		public function set itemsSearchResult(val:SearchResults):void
		{
			_itemsSearchResult = val;
			dispatchEvent( new Event( ITEM_SEARCH_RESULT_CHANGE ));
		}
		
		//-----------------------------
		// catalogSearchResult
		//-----------------------------
		private var _catalogSearchResult : CatalogSearchResults;
		[Bindable("catalogSearchResultChange")]
		public function get catalogSearchResult():CatalogSearchResults
		{
			return _catalogSearchResult;
		}
		public function set catalogSearchResult(val:CatalogSearchResults):void
		{
			_catalogSearchResult = val;
			dispatchEvent(new Event(CATALOG_SEARCH_RESULT_CHANGE ));
		}
		
		//-------------------------------------------------------------------------
		//
		// METHODS
		//
		//--------------------------------------------- ----------------------------
		
		public var categoryMap : Dictionary = new Dictionary();
		
		public function processCategories ( ac : ArrayCollection ) : void
		{
			if ( categories )
			{
				//categories.disableAutoUpdate();
			}
			var cat:Category
			
			if ( !categories )
			{
				categories = ac;
			}
			else
			{
				for ( i = 0; i < ac.length; i++)
				{
					cat = ac[i];
					var catPathIdArray : Array = cat.categoryIdPath.split(":");
					
					if ( catPathIdArray.length > 1 )
					{
						var newArray : Array = catPathIdArray.slice(0, catPathIdArray.length-1);
						var parentCatPath : String = newArray.join(":");
						//trace("\n newArray : " + newArray + " parentCatPath : " + parentCatPath );
						var parentCat : Category = categoryMap[ parentCatPath ];
						if ( parentCat )
						{
							parentCat.addChild( ac[i] );
						}
					} 
				}
			}
			//categories.enableAutoUpdate();
			dispatchEvent( new Event(CATEGORIES_CHANGE ));
			for ( var i : int = 0; i < ac.length; i ++)
			{
				cat = ac[i];
				categoryMap [ cat.categoryIdPath ] = cat;
			}
			
		}
		
		
		private function addChildCategory( newCat : Category ) : void
		{
			var catPath : String = newCat.categoryIdPath;
			var catPathArray : Array = catPath.split(":");
			
		}
		/*private function getNestedCategory ( parentCat : Category, level : int, parentCategoryId : String ) : Category
		{
			var cat : Category;
			
			if ( level == 1 
				&& parentCat.categoryID == parentCategoryId )
			{
				return parentCat;
			}
			
			while ( parentCat.leafCategory == false && parentCat.children.length > 0)
			{
				for ( var i:int = 0; i < parentCat.children.length; i++ )
				{
					var pCat : Category = parentCat.children[i];
					cat = getNestedCategory( pCat, pCat.categoryLevel, pCat.categoryID );
					if ( cat )
					{
						return cat;
					}
				}
			}
			
			return cat;
		}*/
	}
}